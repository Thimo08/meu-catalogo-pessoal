Documentação do Projeto: Meu Portfólio de Filmes
(Gerado em: terça-feira, 26 de agosto de 2025, 14:58:17)

1. Visão Geral do Projeto
O "Meu Portfólio de Filmes" é um aplicativo mobile de tela única desenvolvido para exibir uma coleção pessoal de filmes favoritos. O aplicativo apresenta uma lista rolável de filmes, onde cada item exibe a capa, título, resumo, ano de lançamento e plataformas de streaming. Além disso, oferece funcionalidades interativas, como links para páginas de detalhes e um design sofisticado de modo escuro.

Tecnologias Principais:

React Native: Framework para desenvolvimento de aplicativos nativos.

Expo: Plataforma e conjunto de ferramentas que facilitam o desenvolvimento React Native.

TypeScript: Linguagem que adiciona tipagem estática ao JavaScript, aumentando a segurança e a organização do código.

2. Estrutura de Arquivos
O projeto é organizado de forma simples e modular, separando dados, componentes e assets.

meu-catalogo-pessoal/
├── assets/
│   ├── GG.jpg
│   └── ... (outras imagens de capa)
├── components/
│   └── TelaCatalogo.tsx  <-- O coração visual e lógico do app
├── App.tsx               <-- Ponto de entrada principal do app
├── catalogo.js           <-- Nosso "banco de dados" local
└── ... (outros arquivos de configuração)
assets/: Esta pasta armazena todos os recursos estáticos do projeto, como as imagens de capa dos filmes que são carregadas localmente.

components/: Contém os componentes da interface do usuário. No nosso caso, temos apenas um, o TelaCatalogo.tsx.

catalogo.js: Funciona como nosso banco de dados. É um arquivo JavaScript que exporta um array de objetos, onde cada objeto representa um filme. Ele foi criado como .js (e não .json) para permitir o uso da função require() para carregar imagens locais.

App.tsx: É o arquivo raiz do aplicativo. Sua única responsabilidade é importar e renderizar o componente TelaCatalogo.

3. Fluxo de Dados
O fluxo de informações no aplicativo é unidirecional e simples:

Fonte de Dados (catalogo.js): O arquivo catalogo.js exporta uma lista (array) de objetos de filmes. Cada objeto contém todas as informações necessárias: título, ano, capa, links, etc.

Importação no Componente: O componente TelaCatalogo.tsx importa essa lista diretamente com a linha import listaDeFilmes from '../catalogo.js';.

Renderização Dinâmica: O componente utiliza o método .map() do JavaScript para percorrer a listaDeFilmes. Para cada filme no array, ele cria e renderiza um componente visual (<View style={estilos.cartao}>), populando-o com os dados daquele filme.

Exibição na Tela: O resultado é uma lista de cartões, onde cada um corresponde a um objeto do nosso arquivo de dados.

4. Análise Detalhada do Componente (TelaCatalogo.tsx)
Este é o arquivo principal, onde toda a lógica e a interface do usuário residem.

a) Importações
O componente importa todas as ferramentas necessárias:

Componentes visuais do react-native: View, Text, Image, ScrollView, TouchableOpacity, etc.

Ícones da biblioteca @expo/vector-icons: Para decorar o cabeçalho e o botão de detalhes.

Linking do expo-linking: Para a funcionalidade de abrir URLs externas.

Nossos dados de ../catalogo.js.

b) Interface TypeScript (Filme)
Para garantir a consistência dos dados, definimos uma interface que descreve o formato de cada objeto de filme:

TypeScript

interface Filme {
  // ...
  imagemCapa: string | number; 
  linkDetalhes: string;
}
O tipo string | number para imagemCapa é crucial. Ele permite que a propriedade aceite tanto um texto (URL da internet) quanto um número (o ID retornado pelo require() para imagens locais).

c) Estrutura Visual (JSX)
A estrutura do componente é dividida em três partes principais, organizadas dentro de um SafeAreaView:

Cabeçalho (<View style={estilos.cabecalho}>): Um View fixo no topo da tela com o título e o ícone do aplicativo.

Conteúdo Rolável (<ScrollView>): O corpo principal do app. Ele contém a lógica .map() que renderiza a lista de cartões de filmes, permitindo que o usuário role para ver todos os itens.

Rodapé (<View style={estilos.rodape}>): Um View fixo na parte inferior da tela com as informações de copyright.

d) Lógica de Interação
A interatividade é gerenciada pela função handlePressDetalhes e pelo componente TouchableOpacity:

JavaScript

const handlePressDetalhes = (url: string) => {
  Linking.openURL(url);
};
Quando o usuário toca no ícone de lupa (que está envolvido por um TouchableOpacity), o evento onPress chama a função handlePressDetalhes.

Essa função, por sua vez, usa o Linking.openURL() para pedir ao sistema operacional do celular que abra o link do filme no navegador padrão.

e) Lógica de Exibição de Imagens
Esta é a parte mais inteligente do componente. Para carregar tanto imagens da internet quanto locais, usamos uma verificação de tipo diretamente na propriedade source do componente <Image>:

JavaScript

<Image 
  source={typeof filme.imagemCapa === 'string' ? { uri: filme.imagemCapa } : filme.imagemCapa}
  style={estilos.imagemCapa} 
/>
typeof filme.imagemCapa === 'string' verifica se o dado é um texto.

Se for um texto, ele assume que é uma URL e monta o objeto { uri: ... }.

Se não for um texto (será um número, vindo do require()), ele passa o dado diretamente.

f) Estilização com StyleSheet
Todo o design do aplicativo é definido em um único objeto StyleSheet.create. Isso otimiza o desempenho e mantém o código organizado. As principais técnicas de layout utilizadas são:

Flexbox: Usado extensivamente para alinhar itens, como no cabeçalho (flexDirection: 'row' para alinhar ícone e texto) e nos cartões (para alinhar a imagem ao lado das informações).

Sombras e Elevação: As propriedades shadow... (para iOS) e elevation (para Android) são usadas no estilo cartao para criar um efeito de profundidade, fazendo com que os cartões pareçam flutuar.

5. Conclusão
O projeto "Meu Portfólio de Filmes" serve como um excelente estudo de caso para os fundamentos do desenvolvimento mobile com React Native e Expo. Ele cobre desde a estruturação de um projeto, manipulação de dados locais (estáticos), renderização de listas, estilização avançada, até a implementação de funcionalidades interativas e o tratamento de diferentes tipos de assets.
